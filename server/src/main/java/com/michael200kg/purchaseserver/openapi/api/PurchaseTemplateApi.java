/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.michael200kg.purchaseserver.openapi.api;

import com.michael200kg.purchaseserver.openapi.dto.PurchaseTemplate;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-08T01:41:58.754751300+03:00[Europe/Moscow]")

@Validated
@Api(value = "PurchaseTemplate", description = "the PurchaseTemplate API")
public interface PurchaseTemplateApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Creates new PurchaseTemplate", nickname = "createTemplate", notes = "", response = PurchaseTemplate.class, tags={ "Purchase Template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created Purchase Template", response = PurchaseTemplate.class) })
    @RequestMapping(value = "/template",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PurchaseTemplate> createTemplate(@ApiParam(value = "Template"  )  @Valid @RequestBody PurchaseTemplate purchaseTemplate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"text\" : \"text\", \"items\" : [ { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" }, { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" } ], \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Deletes existing Purchase Template", nickname = "deleteTemplate", notes = "", tags={ "Purchase Template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted Purchase Template") })
    @RequestMapping(value = "/template/{templateId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTemplate(@ApiParam(value = "Id of the Purchase Template",required=true) @PathVariable("templateId") Integer templateId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Edit Purchase Template", nickname = "editTemplate", notes = "", response = PurchaseTemplate.class, tags={ "Purchase Template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Edited Purchase Template", response = PurchaseTemplate.class) })
    @RequestMapping(value = "/template",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<PurchaseTemplate> editTemplate(@ApiParam(value = "Template"  )  @Valid @RequestBody PurchaseTemplate purchaseTemplate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"text\" : \"text\", \"items\" : [ { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" }, { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" } ], \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get Purchase Template by id", nickname = "getTemplateById", notes = "", response = PurchaseTemplate.class, tags={ "Purchase Template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Purchase Template", response = PurchaseTemplate.class) })
    @RequestMapping(value = "/template/{templateId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PurchaseTemplate> getTemplateById(@ApiParam(value = "Id Purchase of the Template",required=true) @PathVariable("templateId") Integer templateId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"text\" : \"text\", \"items\" : [ { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" }, { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" } ], \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get list of all Templates", nickname = "getTemplates", notes = "", response = PurchaseTemplate.class, responseContainer = "List", tags={ "Purchase Template", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved list of all Templates", response = PurchaseTemplate.class, responseContainer = "List") })
    @RequestMapping(value = "/template",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<PurchaseTemplate>> getTemplates() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"text\" : \"text\", \"items\" : [ { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" }, { \"purchaseTemplateId\" : 1, \"ord\" : 5, \"itemName\" : \"itemName\", \"id\" : 6, \"itemDescription\" : \"itemDescription\" } ], \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
