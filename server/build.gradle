buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
        classpath 'org.codehaus.groovy:groovy-backports-compat23:2.4.6'
    }
}


plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'org.hidetake.ssh' version '2.10.1'
}

apply plugin: 'org.hidetake.ssh'

group = 'com.michael200kg'
version = '1.0'
sourceCompatibility = '1.8'

def projectRootDir = 'C:\\Users\\Mikhail_Vershkov\\IdeaProjects\\purchases'
def remoteServer = 'ec2-3-139-58-139.us-east-2.compute.amazonaws.com'
def NPM_PATH = 'C:\\users\\Mikhail_Vershkov\\AppData\\Roaming\\npm\\';

repositories {
    mavenCentral()
}

dependencies {

    implementation("org.hidetake:gradle-ssh-plugin:2.10.1")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('org.springframework.boot:spring-boot-starter-websocket')

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation('org.openapitools:jackson-databind-nullable:0.2.1')

    implementation('org.apache.commons:commons-lang3:3.3')
    implementation('io.swagger:swagger-annotations:1.5.0')
    implementation('io.swagger:swagger-core:1.5.0')
    implementation('io.springfox:springfox-swagger2:2.9.2')
    implementation('io.jsonwebtoken:jjwt:0.9.1')
    implementation('javax.validation:validation-api:2.0.1.Final')
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'

    runtimeOnly 'mysql:mysql-connector-java';

    compileOnly('org.projectlombok:lombok:1.18.6')
    annotationProcessor('org.projectlombok:lombok:1.18.6')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}


remotes {
    webServer {
        host = remoteServer
        user = 'ec2-user'
        identity = file('C:\\aws\\keys\\aws_ssh_keys.pem')
    }
}

task deployJarToRemote {
    dependsOn bootJar
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }
        print projectRootDir
        ssh.run {
            session(remotes.webServer) {
                put from: projectRootDir + '/server/build/libs/purchase-server-1.0.jar', into: '/opt/purchases'
                execute 'sudo systemctl restart purchase.service'
            }
        }
    }
}

task buildNpmApp(type: Exec) {
    workingDir projectRootDir + '/ui/'
    commandLine 'cmd', '/c', NPM_PATH + 'ng build -c aws'
}

task deployStaticToRemote {
    dependsOn buildNpmApp
    ssh.settings {
        knownHosts = allowAnyHosts
    }
    doLast {
        ssh.run {
            session(remotes.webServer) {
                execute 'sudo rm -rf /var/www/purchases'
                put from: projectRootDir + '/ui/dist/purchases', into: '/var/www'
            }
        }
    }
}

task deployAllToRemote {
    dependsOn deployJarToRemote, deployStaticToRemote
}


